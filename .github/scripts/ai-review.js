const axios = require('axios');
const { execSync } = require('child_process');
const github = require('@actions/github');

const model = process.env.AI_MODEL || 'gemini';
const azureKey = process.env.AZURE_OPENAI_KEY;
const azureEndpoint = process.env.AZURE_OPENAI_ENDPOINT;
const azureDeployment = process.env.AZURE_OPENAI_DEPLOYMENT;
const geminiKey = process.env.GEMINI_API_KEY;
const geminiEndpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${geminiKey}`;

let diff = '';
try {
  const base = process.env.GITHUB_BASE_REF || 'main';
  execSync(`git fetch origin ${base}`, { stdio: 'inherit' });
  diff = execSync(`git diff origin/${base}...HEAD`, { stdio: 'pipe' }).toString();
  if (!diff.trim()) {
    console.log("✅ No changes to review. Skipping AI code review.");
    process.exit(0);
  }
} catch (e) {
  console.error("❌ Failed to get git diff:", e.message);
  process.exit(1);
}

const structuredPrompt = `You are an expert code reviewer.

Analyze the following git diff and return a JSON array of inline review comments in this format:

[
  {
    "file": "src/app.js",
    "position": 12,
    "comment": "Consider using const instead of let."
  },
  ...
]

Only return valid JSON. Do not include markdown or text outside the JSON. Here is the diff:

${diff}`;

async function runAIModel() {
  if (model === 'azure') {
    console.log("🔹 Using Azure OpenAI...");
    const res = await axios.post(
      `${azureEndpoint}/openai/deployments/${azureDeployment}/chat/completions?api-version=2024-03-01-preview`,
      {
        messages: [
          { role: "system", content: "You are a professional code reviewer." },
          { role: "user", content: structuredPrompt }
        ],
        temperature: 0.3,
        max_tokens: 4096
      },
      {
        headers: {
          "api-key": azureKey,
          "Content-Type": "application/json"
        }
      }
    );
    return res.data.choices?.[0]?.message?.content;
  } else {
    console.log("🔷 Using Gemini...");
    const res = await axios.post(
      geminiEndpoint,
      {
        contents: [{ parts: [{ text: structuredPrompt }], role: "user" }],
        generationConfig: {
          temperature: 0.1,
          topP: 0.9,
          maxOutputTokens: 8192
        }
      },
      {
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
    return res.data.candidates?.[0]?.content?.parts?.[0]?.text;
  }
}

async function postInlineComments(commentsJSON) {
  const token = process.env.GITHUB_TOKEN;
  const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
  const prMatch = process.env.GITHUB_REF.match(/refs\/pull\/(\d+)\/merge/);
  const prNumber = prMatch?.[1];

  if (!token || !owner || !repo || !prNumber) throw new Error("Missing GitHub context");
  const octokit = github.getOctokit(token);

  // ✅ Get correct commit SHA for PR head
  const prInfo = await octokit.rest.pulls.get({ owner, repo, pull_number: prNumber });
  const sha = prInfo.data.head.sha;

  let comments;
  try {
    const cleaned = commentsJSON.replace(/```json\n?|```\n?|```/g, '').trim();
    comments = JSON.parse(cleaned);
  } catch (e) {
    console.error("❌ Failed to parse AI JSON:", e.message);
    return;
  }

  if (!Array.isArray(comments) || comments.length === 0) {
    console.log("🟢 No inline comments generated by AI.");
    return;
  }

  for (const item of comments) {
    if (!item.file || typeof item.position !== 'number' || !item.comment) continue;
    try {
      await octokit.rest.pulls.createReviewComment({
        owner,
        repo,
        pull_number: prNumber,
        commit_id: sha,
        path: item.file,
        position: item.position,
        body: item.comment
      });
      console.log(`💬 Posted comment on ${item.file} at position ${item.position}`);
    } catch (err) {
      console.error("❌ Failed to post inline comment:", err.message);
    }
  }
}

(async () => {
  try {
    const response = await runAIModel();
    console.log("\n🔍 Raw AI Output:");
    console.log(response);
    await postInlineComments(response);
  } catch (err) {
    console.error("❌ Error in review flow:", err.response?.data || err.message);
  }
})();